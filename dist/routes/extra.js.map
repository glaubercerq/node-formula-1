{"version":3,"sources":["../../src/routes/extra.ts","../../src/data/index.ts"],"sourcesContent":["import { FastifyInstance } from 'fastify';\r\nimport { teams, drivers } from '../data';\r\n\r\nexport async function extraRoutes(fastify: FastifyInstance) {\r\n  fastify.get('/health', async () => {\r\n    return { status: 'OK', timestamp: new Date().toISOString() };\r\n  });\r\n\r\n  fastify.get('/stats', async () => {\r\n    const totalTeams = teams.length;\r\n    const totalDrivers = drivers.length;\r\n    const driversByTeam = teams.map(team => ({\r\n      team: team.name,\r\n      drivers: drivers.filter(driver => driver.team === team.name).length\r\n    }));\r\n\r\n    return {\r\n      totalTeams,\r\n      totalDrivers,\r\n      driversByTeam\r\n    };\r\n  });\r\n\r\n  fastify.get('/drivers/by-team/:teamName', async (request: any) => {\r\n    const teamName = decodeURIComponent(request.params.teamName);\r\n    const teamDrivers = drivers.filter(driver => \r\n      driver.team.toLowerCase() === teamName.toLowerCase()\r\n    );\r\n\r\n    if (teamDrivers.length === 0) {\r\n      return { message: 'No drivers found for this team', drivers: [] };\r\n    }\r\n\r\n    return { team: teamName, drivers: teamDrivers };\r\n  });\r\n}\r\n","import { Team, Driver } from '../types';\r\n\r\nexport const teams: Team[] = [\r\n  { id: 1, name: \"McLaren\", base: \"Woking, United Kingdom\" },\r\n  { id: 2, name: \"Mercedes\", base: \"Brackley, United Kingdom\" },\r\n  { id: 3, name: \"Red Bull Racing\", base: \"Milton Keynes, United Kingdom\" },\r\n  { id: 4, name: \"Ferrari\", base: \"Maranello, Italy\" },\r\n  { id: 5, name: \"Alpine\", base: \"Enstone, United Kingdom\" },\r\n  { id: 6, name: \"Aston Martin\", base: \"Silverstone, United Kingdom\" },\r\n  { id: 7, name: \"Alfa Romeo Racing\", base: \"Hinwil, Switzerland\" },\r\n  { id: 8, name: \"AlphaTauri\", base: \"Faenza, Italy\" },\r\n  { id: 9, name: \"Williams\", base: \"Grove, United Kingdom\" },\r\n  { id: 10, name: \"Haas\", base: \"Kannapolis, United States\" }\r\n];\r\n\r\nexport const drivers: Driver[] = [\r\n  { id: 1, name: \"Max Verstappen\", team: \"Red Bull Racing\" },\r\n  { id: 2, name: \"Lewis Hamilton\", team: \"Ferrari\" },\r\n  { id: 3, name: \"Lando Norris\", team: \"McLaren\" },\r\n  { id: 4, name: \"Charles Leclerc\", team: \"Ferrari\" },\r\n  { id: 5, name: \"George Russell\", team: \"Mercedes\" },\r\n  { id: 6, name: \"Carlos Sainz Jr.\", team: \"Ferrari\" },\r\n  { id: 7, name: \"Fernando Alonso\", team: \"Aston Martin\" },\r\n  { id: 8, name: \"Lance Stroll\", team: \"Aston Martin\" },\r\n  { id: 9, name: \"Oscar Piastri\", team: \"McLaren\" },\r\n  { id: 10, name: \"Pierre Gasly\", team: \"Alpine\" },\r\n  { id: 11, name: \"Esteban Ocon\", team: \"Alpine\" },\r\n  { id: 12, name: \"Alexander Albon\", team: \"Williams\" },\r\n  { id: 13, name: \"Logan Sargeant\", team: \"Williams\" },\r\n  { id: 14, name: \"Valtteri Bottas\", team: \"Alfa Romeo Racing\" },\r\n  { id: 15, name: \"Zhou Guanyu\", team: \"Alfa Romeo Racing\" },\r\n  { id: 16, name: \"Yuki Tsunoda\", team: \"AlphaTauri\" },\r\n  { id: 17, name: \"Nyck de Vries\", team: \"AlphaTauri\" },\r\n  { id: 18, name: \"Kevin Magnussen\", team: \"Haas\" },\r\n  { id: 19, name: \"Nico Hulkenberg\", team: \"Haas\" }\r\n];\r\n"],"mappings":"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","names":[]}